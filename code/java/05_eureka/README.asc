= Service Registration & Discovery


This section of the lab looks at how using a service registry (like Netflix's Eureka) can decouple services. It's easiest to think of Eureka as a phone-book or a directory for your services: as they spin up and claim a host and port, they register themselves with the directory and any service that wants to _discover_ or route to them need  only ask the directory.

If a given service is _not_ listed in the directory then a client is at least empowered to react accordingly instead of blindly attempting a service-to-service call.

Services may also handle their own routing and load-balancing if they have the ability to ask questions about the state and topology of the system. After all, a client knows best what priorities should be applied to its requests and its also better positioned to change those priorities as needed. If a client can ask questions about the topology of the system, it can react to changes in that topology accordingly.

Spring Cloud supports Netflix's Eureka and the https://github.com/hashicorp/consul[Hashicorp Consul] project as service registries. The Consul integration is being actively developed so for the purposes of this lab, we'll https://github.com/Netflix/eureka[look at Netflix's Eureka].

NOTE: **A Word About the Directory Structure**:  All projects will inherit the mostly common and boilerplate build configuration from the root `pom.xml`. Start there, and then inspect the module-specific `pom.xml` files.

NOTE: **A Word About the Cloud Foundry Support**: All of these projects are designed to be run on Cloud Foundry. Each module describes (_declares_) the runtime requirements for each module in the adjacent `manifest.yml` file. There's an _installer script_ in the root of the project, `cf.sh`.

== Standing Up the  Eureka Service Registry
Eureka's distributed as a Spring Boot auto-configuration. You layer Eureka as a facility on top of a Spring Boot application and then deploy it.

* the important code is in `eureka-service/src/main/java/registry/Application.java`. It demonstrates how easy it is to standup the Netflix Eureka service registry. It boils down, basically, to one annotation (`@EnableEurekaServer`).
* Eureka requires very little additional configuration. Notably, `eureka-service/src/main/resources/application.yml`  does little but go out of its way to tell itself not to register with itself. Other than that, it's a standard, plain vanilla Spring Cloud module.
* The `org.springframework.cloud:spring-cloud-starter-eureka-server` dependency _activates_ the registry.
*  Note that because we want all services to be able to find the registry, it's recommended that it be put behind a fixed hostname and optionally made highly available. We make sure that all services can find it by exposing its location as a Cloud Foundry _user provided service_ in the `cf.sh` installer script. Thus all other services can find the registry  using the same consistent access patterns they use to talk to, for example, a backend message queue or database.
* To start the registry, run the `eureka-service` module and then visit `http://localhost:8761`. Keep that page handy as we'll need it in the next section.


== Registering a Service with the Registry
Both `bookmark-service` and `photo-service` _register_ themselves with the registry. The serivices themselves aren't so interesting themselves. They're just simple, singly-focused REST APIs that may live or come down as demand requires. Any service can be made to automatically register with the registry if it has the `org.springframework.cloud:spring-cloud-starter-eureka` dependency on the CLASSPATH and are annotated with `@@EnableEurekaClient`. This Spring Boot auto-configuration will assume that it is to register itself at `http://127.0.0.1:8761` absent any specific configuration.

* We can provide and override specific configuration, like so.

  ```
  eureka:
    client:
      serviceUrl:
        defaultZone: ${vcap.services.eureka-service.credentials.uri:http://127.0.0.1:8761}/eureka/
  ```

NOTE: This syntax uses Spring's property placeholder rseolution synax to either resolve the host by either dereferencing the value implied by the property path `vcap.services.eureka-service.credentials.uri` or defaulting to `http://127.0.0.1:8761`.

* Services are registered with the registry by their `spring.application.name` value. That value is by default expected to live in `bootstrap.yml` or  `bootstrap.properties`. If a service's `spring.application.name` is `foo`, then it will be listed as `FOO` in the registry.

== Flexible Topologies with Client Side Load-Balancing and the Eureka Service Registry

* Start up both the `bookmark-service` and the `photo-service`, then wait about 30 seconds, then check the Eureka page (`http://127.0.0.1:8761`), you will see both of them listed in Eureka  under the _applications_ header. Mouse over the links to see the host and port on which the services live. You'll see their status (`UP`, `DOWN`, etc.), and if you click on the link you'll be taken to the service's _info_ page.

A Java client can now ask  where services live  (which host and port) and how many of them there are. It can employ load balancing strategies (the default is round-robin). There are a few natural ways to do this. A few of them are demonstrated in the `passport-service` example application. Open the `passport-service/src/main/java/passport/Application.java` and then run it.

* the first is the Netflix Eureka `DiscoverClient`. The `DiscoveryClient` is an API. Use this to interrogate the registry directly and in a more low-level fashion. It's useful if you want to get and analyze information about the state of the registered services directly.
* if all you want to do is route to a resolved, available service instance  when making an HTTP REST client call, then simply inject a `RestTemplate`. Spring Cloud adds an interceptor that dynamically replaces the URI of the `RestTemplate` request with one resolved by checking with the registry. Thus, an HTTP request targeted at `http://foo-service/` would first resolve a host and port for the service named `foo-service` in Eureka, _then_ would execute the call. Other than that, the use of the `RestTemplate` should be pretty familiar.
* You can take this approach even further using Spring Cloud's fantastic integration with Feign and Ribbon. In our example, we describe the remote service's contract using a standard client-side interface with methods annotted using Spring MVC's annotations. Spring Cloud and Feign will provide a synthesized proxy that clietns can use in a type-safe manner. The configuration is done in the `Application` class and it is there that, again, a URI string is input with a service ID in place of the host and port. This again is resolved by way of Eureaka before requests are made.
